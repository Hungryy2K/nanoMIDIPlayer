import customtkinter
import os
import threading
import tkinter as tk
from tkinter import filedialog
from PIL import Image
import mido
from mido import MidiFile
import keyboard
import datetime
import time
import requests
import json
import math
import re
import base64
import io
import tempfile
import argparse
import ctypes
import sys
from threading import Thread, Event

config_path = "./config.json"
if os.path.exists(config_path):
    with open(config_path, 'r') as config_file:
        config_data = json.load(config_file)

class App(customtkinter.CTk):
    def __init__(self):

        def b64toimage(b64string):
            data = base64.b64decode(b64string)
            return Image.open(io.BytesIO(data))

        self.playback_state = False
        self.playback_start_time = None
        self.last_update_time = None
        self.max_log_messages = 5
        self.isRunning = False
        self.log_labels = []
        self.sustainToggle = False
        self.CloseThread = False
        self.pause_event = Event()
        self.pause_event.set()
        self.paused = False
        self.selected_device = None
        self.midi_file_path = None
        self.hasUpdated = False
        self.playback_speed = 100
        
        parser = argparse.ArgumentParser(description='nanoMIDIPlayer')
        parser.add_argument('--debug', action='store_true', help='debug console')
        args = parser.parse_args()

        if args.debug:
            self.create_debug_console()
            print("console opened.")

        super().__init__()
        """ This is to stream the theme.json
        themejsurl = "https://raw.githubusercontent.com/NotHammer043/nanoMIDIPlayer/main/assets/theme.json"
        themejs = os.path.join(os.path.dirname(__file__), "temp_theme.json")
        with open(themejs, 'w') as f:
            f.write(requests.get(themejsurl).text)
        """
            
        theme_base64 = "ewogICAgIkNUayI6IHsKICAgICAgImZnX2NvbG9yIjogWyJ3aGl0ZSIsICJibGFjayJdCiAgICB9LAogICAgIkNUa1RvcGxldmVsIjogewogICAgICAiZmdfY29sb3IiOiBbIndoaXRlIiwgImJsYWNrIl0KICAgIH0sCiAgICAiQ1RrRnJhbWUiOiB7CiAgICAgICJjb3JuZXJfcmFkaXVzIjogNiwKICAgICAgImJvcmRlcl93aWR0aCI6IDAsCiAgICAgICJmZ19jb2xvciI6IFsiZ3JheTIiLCAiZ3JheTIiXSwKICAgICAgInRvcF9mZ19jb2xvciI6IFsiZ3JheTIiLCAiZ3JheTIiXSwKICAgICAgImJvcmRlcl9jb2xvciI6IFsiZ3JheTIiLCAiZ3JheTIiXQogICAgfSwKICAgICJDVGtCdXR0b24iOiB7CiAgICAgICJjb3JuZXJfcmFkaXVzIjogNiwKICAgICAgImJvcmRlcl93aWR0aCI6IDAsCiAgICAgICJmZ19jb2xvciI6IFsiZ3JheTEwIiwgImdyYXkxMCJdLAogICAgICAiaG92ZXJfY29sb3IiOiBbImdyYXk1IiwgImdyYXk1Il0sCiAgICAgICJib3JkZXJfY29sb3IiOiBbIndoaXRlIiwgImJsYWNrIl0sCiAgICAgICJ0ZXh0X2NvbG9yIjogWyJibGFjayIsICJ3aGl0ZSJdLAogICAgICAidGV4dF9jb2xvcl9kaXNhYmxlZCI6IFsiZ3JheTc0IiwgImdyYXk2MCJdCiAgICB9LAogICAgIkNUa0xhYmVsIjogewogICAgICAiY29ybmVyX3JhZGl1cyI6IDAsCiAgICAgICJmZ19jb2xvciI6ICJ0cmFuc3BhcmVudCIsCiAgICAgICJ0ZXh0X2NvbG9yIjogWyJ3aGl0ZSIsICJ3aGl0ZSJdCiAgICB9LAogICAgIkNUa0VudHJ5IjogewogICAgICAiY29ybmVyX3JhZGl1cyI6IDYsCiAgICAgICJib3JkZXJfd2lkdGgiOiAyLAogICAgICAiZmdfY29sb3IiOiBbImJsYWNrIiwgImJsYWNrIl0sCiAgICAgICJib3JkZXJfY29sb3IiOiBbImJsYWNrIiwgImJsYWNrIl0sCiAgICAgICJ0ZXh0X2NvbG9yIjpbIndoaXRlIiwgIndoaXRlIl0sCiAgICAgICJwbGFjZWhvbGRlcl90ZXh0X2NvbG9yIjogWyJncmF5NjIiLCAiZ3JheTYyIl0KICAgIH0sCiAgICAiQ1RrQ2hlY2tCb3giOiB7CiAgICAgICJjb3JuZXJfcmFkaXVzIjogNiwKICAgICAgImJvcmRlcl93aWR0aCI6IDMsCiAgICAgICJmZ19jb2xvciI6IFsid2hpdGUiLCAiYmxhY2siXSwKICAgICAgImJvcmRlcl9jb2xvciI6IFsid2hpdGUiLCAiYmxhY2siXSwKICAgICAgImhvdmVyX2NvbG9yIjogWyJsaWdodGdyYXkiLCAiZ3JheSJdLAogICAgICAiY2hlY2ttYXJrX2NvbG9yIjogWyJibGFjayIsICJ3aGl0ZSJdLAogICAgICAidGV4dF9jb2xvciI6IFsiYmxhY2siLCAid2hpdGUiXSwKICAgICAgInRleHRfY29sb3JfZGlzYWJsZWQiOiBbImdyYXk2MCIsICJncmF5NDUiXQogICAgfSwKICAgICJDVGtTd2l0Y2giOiB7CiAgICAgICJjb3JuZXJfcmFkaXVzIjogMTAwMCwKICAgICAgImJvcmRlcl93aWR0aCI6IDMsCiAgICAgICJidXR0b25fbGVuZ3RoIjogMCwKICAgICAgImZnX2NvbG9yIjogWyJyZWQiLCAicmVkIl0sCiAgICAgICJwcm9ncmVzc19jb2xvciI6IFsiZ3JlZW4iLCAiZ3JlZW4iXSwKICAgICAgImJ1dHRvbl9jb2xvciI6IFsiZ3JheTE1IiwgImdyYXkxNSJdLAogICAgICAiYnV0dG9uX2hvdmVyX2NvbG9yIjogWyJncmF5MTAiLCAiZ3JheTEwIl0sCiAgICAgICJ0ZXh0X2NvbG9yIjogWyJ3aGl0ZSIsICJ3aGl0ZSJdLAogICAgICAidGV4dF9jb2xvcl9kaXNhYmxlZCI6IFsiZ3JheTQ1IiwgImdyYXk0NSJdCiAgICB9LAogICAgIkNUa1JhZGlvQnV0dG9uIjogewogICAgICAiY29ybmVyX3JhZGl1cyI6IDEwMDAsCiAgICAgICJib3JkZXJfd2lkdGhfY2hlY2tlZCI6IDYsCiAgICAgICJib3JkZXJfd2lkdGhfdW5jaGVja2VkIjogMywKICAgICAgImZnX2NvbG9yIjogWyJ3aGl0ZSIsICJibGFjayJdLAogICAgICAiYm9yZGVyX2NvbG9yIjogWyJ3aGl0ZSIsICJibGFjayJdLAogICAgICAiaG92ZXJfY29sb3IiOiBbImxpZ2h0Z3JheSIsICJncmF5Il0sCiAgICAgICJ0ZXh0X2NvbG9yIjogWyJibGFjayIsICJ3aGl0ZSJdLAogICAgICAidGV4dF9jb2xvcl9kaXNhYmxlZCI6IFsiZ3JheTYwIiwgImdyYXk0NSJdCiAgICB9LAogICAgIkNUa1Byb2dyZXNzQmFyIjogewogICAgICAiY29ybmVyX3JhZGl1cyI6IDEwMDAsCiAgICAgICJib3JkZXJfd2lkdGgiOiAwLAogICAgICAiZmdfY29sb3IiOiBbImxpZ2h0Z3JheSIsICJncmF5Il0sCiAgICAgICJwcm9ncmVzc19jb2xvciI6IFsid2hpdGUiLCAiYmxhY2siXSwKICAgICAgImJvcmRlcl9jb2xvciI6IFsiZ3JheSIsICJncmF5Il0KICAgIH0sCiAgICAiQ1RrU2xpZGVyIjogewogICAgICAiY29ybmVyX3JhZGl1cyI6IDEwMDAsCiAgICAgICJidXR0b25fY29ybmVyX3JhZGl1cyI6IDEwMDAsCiAgICAgICJib3JkZXJfd2lkdGgiOiA2LAogICAgICAiYnV0dG9uX2xlbmd0aCI6IDAsCiAgICAgICJmZ19jb2xvciI6IFsiZ3JheTI1IiwgImdyYXkyNSJdLAogICAgICAicHJvZ3Jlc3NfY29sb3IiOiBbImdyYXkxMCIsICJncmF5MTAiXSwKICAgICAgImJ1dHRvbl9jb2xvciI6IFsiZ3JheTEwIiwgImdyYXkxMCJdLAogICAgICAiYnV0dG9uX2hvdmVyX2NvbG9yIjogWyJncmF5MjAiLCAiZ3JheTIwIl0KICAgIH0sCiAgICAiQ1RrT3B0aW9uTWVudSI6IHsKICAgICAgImNvcm5lcl9yYWRpdXMiOiA2LAogICAgICAiZmdfY29sb3IiOiBbImJsYWNrIiwgImJsYWNrIl0sCiAgICAgICJidXR0b25fY29sb3IiOiBbImdyYXkxMCIsICJncmF5MTAiXSwKICAgICAgImJ1dHRvbl9ob3Zlcl9jb2xvciI6IFsiZ3JheTE1IiwgImdyYXkxNSJdLAogICAgICAidGV4dF9jb2xvciI6IFsid2hpdGUiLCAid2hpdGUiXSwKICAgICAgInRleHRfY29sb3JfZGlzYWJsZWQiOiBbImdyYXk2MCIsICJncmF5NjAiXQogICAgfSwKICAgICJDVGtDb21ib0JveCI6IHsKICAgICAgImNvcm5lcl9yYWRpdXMiOiA2LAogICAgICAiYm9yZGVyX3dpZHRoIjogMiwKICAgICAgImZnX2NvbG9yIjogWyJ3aGl0ZSIsICJibGFjayJdLAogICAgICAiYm9yZGVyX2NvbG9yIjogWyJ3aGl0ZSIsICJibGFjayJdLAogICAgICAiYnV0dG9uX2NvbG9yIjogWyJ3aGl0ZSIsICJibGFjayJdLAogICAgICAiYnV0dG9uX2hvdmVyX2NvbG9yIjogWyJncmF5NzAiLCAiZ3JheTQxIl0sCiAgICAgICJ0ZXh0X2NvbG9yIjogWyJibGFjayIsICJ3aGl0ZSJdLAogICAgICAidGV4dF9jb2xvcl9kaXNhYmxlZCI6IFsiZ3JheTUwIiwgImdyYXk0NSJdCiAgICB9LAogICAgIkNUa1Njcm9sbGJhciI6IHsKICAgICAgImNvcm5lcl9yYWRpdXMiOiAxMDAwLAogICAgICAiYm9yZGVyX3NwYWNpbmciOiA0LAogICAgICAiZmdfY29sb3IiOiAidHJhbnNwYXJlbnQiLAogICAgICAiYnV0dG9uX2NvbG9yIjogWyJsaWdodGdyYXkiLCAiZ3JheSJdLAogICAgICAiYnV0dG9uX2hvdmVyX2NvbG9yIjogWyJncmF5MjAiLCAiZ3JheTEwMCJdCiAgICB9LAogICAgIkNUa1NlZ21lbnRlZEJ1dHRvbiI6IHsKICAgICAgImNvcm5lcl9yYWRpdXMiOiA2LAogICAgICAiYm9yZGVyX3dpZHRoIjogMiwKICAgICAgImZnX2NvbG9yIjogWyJ3aGl0ZSIsICJibGFjayJdLAogICAgICAic2VsZWN0ZWRfY29sb3IiOiBbImdyYXkzNiIsICJ3aGl0ZSJdLAogICAgICAic2VsZWN0ZWRfaG92ZXJfY29sb3IiOiBbImdyYXkyMCIsICJncmF5MTAwIl0sCiAgICAgICJ1bnNlbGVjdGVkX2NvbG9yIjogWyJ3aGl0ZSIsICJibGFjayJdLAogICAgICAidW5zZWxlY3RlZF9ob3Zlcl9jb2xvciI6IFsibGlnaHRncmF5IiwgImdyYXkiXSwKICAgICAgInRleHRfY29sb3IiOiBbImJsYWNrIiwgIndoaXRlIl0sCiAgICAgICJ0ZXh0X2NvbG9yX2Rpc2FibGVkIjogWyJncmF5NzQiLCAiZ3JheTYwIl0KICAgIH0sCiAgICAiQ1RrVGV4dGJveCI6IHsKICAgICAgImNvcm5lcl9yYWRpdXMiOiA2LAogICAgICAiYm9yZGVyX3dpZHRoIjogMCwKICAgICAgImZnX2NvbG9yIjogWyJ3aGl0ZSIsICJibGFjayJdLAogICAgICAiYm9yZGVyX2NvbG9yIjogWyJ3aGl0ZSIsICJibGFjayJdLAogICAgICAidGV4dF9jb2xvciI6WyJibGFjayIsICJ3aGl0ZSJdLAogICAgICAic2Nyb2xsYmFyX2J1dHRvbl9jb2xvciI6IFsibGlnaHRncmF5IiwgImdyYXkiXSwKICAgICAgInNjcm9sbGJhcl9idXR0b25faG92ZXJfY29sb3IiOiBbImdyYXkyMCIsICJncmF5MTAwIl0KICAgIH0sCiAgICAiQ1RrU2Nyb2xsYWJsZUZyYW1lIjogewogICAgICAibGFiZWxfZmdfY29sb3IiOiBbImdyYXk3OCIsICJncmF5MjMiXQogICAgfSwKICAgICJEcm9wZG93bk1lbnUiOiB7CiAgICAgICJmZ19jb2xvciI6IFsid2hpdGUiLCAiYmxhY2siXSwKICAgICAgImhvdmVyX2NvbG9yIjogWyJsaWdodGdyYXkiLCAiZ3JheSJdLAogICAgICAidGV4dF9jb2xvciI6IFsiYmxhY2siLCAid2hpdGUiXQogICAgfSwKICAgICJDVGtGb250IjogewogICAgICAibWFjT1MiOiB7CiAgICAgICAgImZhbWlseSI6ICJTRiBEaXNwbGF5IiwKICAgICAgICAic2l6ZSI6IDEzLAogICAgICAgICJ3ZWlnaHQiOiAibm9ybWFsIgogICAgICB9LAogICAgICAiV2luZG93cyI6IHsKICAgICAgICAiZmFtaWx5IjogIkNvbnNvbGFzIiwKICAgICAgICAic2l6ZSI6IDE0LAogICAgICAgICJ3ZWlnaHQiOiAibm9ybWFsIgogICAgICB9LAogICAgICAiTGludXgiOiB7CiAgICAgICAgImZhbWlseSI6ICJSb2JvdG8iLAogICAgICAgICJzaXplIjogMTMsCiAgICAgICAgIndlaWdodCI6ICJub3JtYWwiCiAgICAgIH0KICAgIH0KICB9CiAgCg=="
        #themejs = "./assets/theme.json"

        
        theme_json = base64.b64decode(theme_base64).decode('utf-8')
        with tempfile.NamedTemporaryFile(delete=False, suffix=".json") as themejsfile:
            themejsfile.write(theme_json.encode('utf-8'))
            themejs = themejsfile.name

        customtkinter.set_default_color_theme(themejs)

        consolas_font = customtkinter.CTkFont(size=14, weight="bold", family="Consolas")

        self.title("nanoMIDIPlayer")
        self.geometry("600x450")
        self.resizable(False, False)

        # BASE64 ICONS FOR COMPILATION
        icon_base64 = "AAABAAMAEBAAAAEAIABoBAAANgAAACAgAAABACAAKBEAAJ4EAAAwMAAAAQAgAGgmAADGFQAAKAAAABAAAAAgAAAAAQAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///+K////+/////7///8B/////////////////////wAAAAD////+////+////4sAAAAAAAAAAAAAAAAAAAAA////+//////////9////Av////////////////////8AAAAA/////v/////////7AAAAAAAAAAAAAAAAAAAAAP///////////////P///wP/////////////////////AAAAAP////7//////////wAAAAAAAAAAAAAAAAAAAAD///////////////v///8E/////////////////////wAAAAD////+//////////8AAAAAAAAAAAAAAAAAAAAA///////////////6////Bf////////////////////8AAAAA////////////////AAAAAAAAAAAAAAAAAAAAAP//////////////DgAAAAD///8O//////////////8OAAAAAP///w7//////////wAAAAAAAAAAAAAAAAAAAAD//////////wAAAAAAAAAAAAAAAP//////////AAAAAAAAAAAAAAAA//////////8AAAAAAAAAAAAAAAAAAAAA//////////8AAAAAAAAAAAAAAAD//////////wAAAAAAAAAAAAAAAP//////////AAAAAAAAAAAAAAAAAAAAAP//////////AAAAAAAAAAAAAAAA//////////8AAAAAAAAAAAAAAAD//////////wAAAAAAAAAAAAAAAAAAAAD//////////wAAAAAAAAAAAAAAAP//////////AAAAAAAAAAAAAAAA//////////8AAAAAAAAAAAAAAAAAAAAA////+/////8AAAAAAAAAAAAAAAD//////////wAAAAAAAAAAAAAAAP/////////7AAAAAAAAAAAAAAAAAAAAAP///4r////7AAAAAAAAAAAAAAAA//////////8AAAAAAAAAAAAAAAD////7////iwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAACAAAABAAAAAAQAgwf///+S////8P///////////////QAAAAD///8C//////////////////////////////////////////8AAAAAAAAAAP////7///////////////D///+T////BwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////kv/////////////////////////8AAAAAP///wP//////////////////////////////////////////wAAAAAAAAAA/////v////////////////////////+TAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD////w//////////////////////////sAAAAA////BP//////////////////////////////////////////AAAAAAAAAAD////+//////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////////////////////+gAAAAD///8F//////////////////////////////////////////8AAAAAAAAAAP////7//////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA///////////////////////////////5AAAAAP///wb//////////////////////////////////////////wAAAAAAAAAA/////v//////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///////////////////////////////gAAAAA////B///////////////////////////////////////////AAAAAAAAAAD////+//////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////////////////////9wAAAAD///8I//////////////////////////////////////////8AAAAAAAAAAP////7//////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA///////////////////////////////2AAAAAP///wn//////////////////////////////////////////wAAAAAAAAAA/////v//////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///////////////////////////////UAAAAA////Cv//////////////////////////////////////////AAAAAAAAAAD///////////////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////////////////////9AAAAAD///8L//////////////////////////////////////////8AAAAAAAAAAP///////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////////////////zcAAAAAAAAAAAAAAAAAAAAA////N/////////////////////////83AAAAAAAAAAAAAAAAAAAAAP///zf/////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////D///////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////kv///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///////////////////+TAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///8H////kv////D/////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/////////w////k////wcgAAAAAQAgwH///8X////eP///9r////7/////////////////////AAAAAAAAAAA////A////////////////////////////////////////////////////////////////////wEAAAAAAAAAAP////7////////////////////7////2v///3n///8X////AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///xf///+w////+///////////////////////////////+gAAAAAAAAAA////Bf///////////////////////////////////////////////////////////////wAAAAAAAAAAAAAAAP////7///////////////////////////////v///+w////FwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///3j////7////////////////////////////////////+QAAAAAAAAAA////Bv///////////////////////////////////////////////////////////////wAAAAAAAAAAAAAAAP////7////////////////////////////////////7////eQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///9r/////////////////////////////////////////+AAAAAAAAAAA////B////////////////////////////////////////////////////////////////wAAAAAAAAAAAAAAAP////7/////////////////////////////////////////2wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////z/////////////////////////////////////////9wAAAAAAAAAA////CP///////////////////////////////////////////////////////////////wAAAAAAAAAAAAAAAP////7//////////////////////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////////////////////////////////////9gAAAAAAAAAA////Cf///////////////////////////////////////////////////////////////wAAAAAAAAAAAAAAAP////7//////////////////////////////////////////////wEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////////////////////////////////////9QAAAAAAAAAA////Cv///////////////////////////////////////////////////////////////wAAAAAAAAAAAAAAAP////7//////////////////////////////////////////////wEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////////////////////////////////////9AAAAAAAAAAA////C////////////////////////////////////////////////////////////////wAAAAAAAAAAAAAAAP////7//////////////////////////////////////////////wEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////////////////////////////////////8wAAAAAAAAAA////DP///////////////////////////////////////////////////////////////wAAAAAAAAAAAAAAAP////7//////////////////////////////////////////////wEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////////////////////////////////////8QAAAAAAAAAA////Df///////////////////////////////////////////////////////////////wAAAAAAAAAAAAAAAP////7//////////////////////////////////////////////wEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////////////////////////////////////8AAAAAAAAAAA////D////////////////////////////////////////////////////////////////wAAAAAAAAAAAAAAAP////7//////////////////////////////////////////////wEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////////////////////////////////////7wAAAAAAAAAA////EP///////////////////////////////////////////////////////////////wAAAAAAAAAAAAAAAP////7//////////////////////////////////////////////wEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////////////////////////////////////7gAAAAAAAAAA////Ef///////////////////////////////////////////////////////////////wAAAAAAAAAAAAAAAP////7//////////////////////////////////////////////wEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////////////////////////////////////7QAAAAAAAAAA////Ev///////////////////////////////////////////////////////////////wAAAAAAAAAAAAAAAP///////////////////////////////////////////////////wEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////////////////////////////////////7AAAAAAAAAAA////Ev///////////////////////////////////////////////////////////////wAAAAAAAAAAAAAAAP///////////////////////////////////////////////////wEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////////4D///8KAAAAAAAAAAAAAAAAAAAAAAAAAAD///8K////gP///////////////////////////////////4D///8KAAAAAAAAAAAAAAAAAAAAAAAAAAD///8K////gP///////////////////////////////////wEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////////wkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////Cv///////////////////////////////////wkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////Cv///////////////////////////////////wEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////////wEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////////wEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////////wEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////////wEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////////wEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////////wEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////////wEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////////wEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////////wEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////////wEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////////wEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////////wEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////////wEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////////wEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////z//////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///9r//////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////////////////////2wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///3j////7/////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/////////////////////////7////eQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///xf///+w////+////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////////////v///+w////FwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///wH///8X////eP///9r////8/////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////////////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/////////8////2////3n
        banner_base64 = ""
        reset_base64 = ""
        piano_base64 = "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"
        download_base64 = ""
        search_base64 = ""

        icon_image = b64toimage(icon_base64)
        bannerimage = b64toimage(banner_base64)
        resetimage = b64toimage(reset_base64)
        pianoimage = b64toimage(piano_base64)
        downloadimage = b64toimage(download_base64)
        searchimage = b64toimage(search_base64)

        self.logo_image = customtkinter.CTkImage(bannerimage, size=(86, 26))
        self.reset_image = customtkinter.CTkImage(resetimage, size=(16, 16))
        self.pianoimage = customtkinter.CTkImage(pianoimage, size=(20, 20))
        self.downloadimagefile = customtkinter.CTkImage(downloadimage, size=(18, 18))
        self.searchimagefile = customtkinter.CTkImage(searchimage, size=(18, 18))

        icon_path = os.path.join(os.path.dirname(__file__), "temp_icon.ico")
        icon_image.save(icon_path)

        self.iconbitmap(icon_path)

        self.grid_rowconfigure(0, weight=1)
        self.grid_columnconfigure(1, weight=1)

        self.navigation_frame = customtkinter.CTkFrame(self, corner_radius=0)
        self.navigation_frame.grid(row=0, column=0, sticky="nsew")
        self.navigation_frame.grid_rowconfigure(4, weight=1)

        self.navigation_frame_label = customtkinter.CTkLabel(
            self.navigation_frame, text="", image=self.logo_image,
            compound="left", font=customtkinter.CTkFont(size=15, weight="bold", family="Consolas")
        )
        self.navigation_frame_label.grid(row=0, column=0, padx=20, pady=20)

        self.home_button = customtkinter.CTkButton(
            self.navigation_frame, corner_radius=0, height=40, border_spacing=10, text="MIDI Player",
            fg_color="transparent", text_color=("gray10", "gray90"), hover_color=("gray7", "gray7"),
            image=self.pianoimage, anchor="w", font=consolas_font, command=self.home_button_event
        )
        self.home_button.grid(row=1, column=0, sticky="ew")

        self.midi_hub = customtkinter.CTkButton(
            self.navigation_frame, corner_radius=0, height=40, border_spacing=10, text="MIDI Hub",
            fg_color="transparent", text_color=("gray10", "gray90"), hover_color=("gray7", "gray7"),
            image=self.pianoimage, anchor="w", font=consolas_font, command=self.midi_hub_event
        )
        self.midi_hub.grid(row=2, column=0, sticky="ew")

        self.versionlabel = customtkinter.CTkLabel(
            self.navigation_frame, text="nanoMIDI // v4.69", fg_color="transparent", text_color="#191919", font=consolas_font
        )
        self.versionlabel.grid(row=6, column=0, padx=20, pady=1, sticky="s")

        # CONFIG

        def switchUseMIDI():
            config_data['useMIDI'] = switchUseMIDIvar.get() == "on"
            with open(config_path, 'w') as config_file:
                json.dump(config_data, config_file, indent=2)
            self.useMIDIStatus()

        def switchSustain():
            config_data['sustainEnabled'] = switchSustainvar.get() == "on"
            with open(config_path, 'w') as config_file:
                json.dump(config_data, config_file, indent=2)

        def switchNoDoubles():
            config_data['noDoubles'] = switchNoDoublesvar.get() == "on"
            with open(config_path, 'w') as config_file:
                json.dump(config_data, config_file, indent=2)

        def switchVelocity():
            config_data['velocity'] = switchVelocityvar.get() == "on"
            with open(config_path, 'w') as config_file:
                json.dump(config_data, config_file, indent=2)

        def switch88Keys():
            config_data['88Keys'] = switch88Keysvar.get() == "on"
            with open(config_path, 'w') as config_file:
                json.dump(config_data, config_file, indent=2)

        def switchConsole():
            config_data['console'] = switchConsolevar.get() == "on"
            with open(config_path, 'w') as config_file:
                json.dump(config_data, config_file, indent=2)
            for widget in self.consolekl.winfo_children():
                    widget.destroy()
            if config_data['console']:
                threading.Thread(target=self.consolekl_text_insert, args=(f"If playback is laggy",)).start()
                threading.Thread(target=self.consolekl_text_insert, args=(f"Consider disabling this :)",)).start()
            else:
                threading.Thread(target=self.consolekl_text_insert_ignorefalse, args=(f"Disabled",)).start()

        switchUseMIDIvar = customtkinter.StringVar(value="off")
        switchSustainvar = customtkinter.StringVar(value="off")
        switchNoDoublesvar = customtkinter.StringVar(value="off")
        switchVelocityvar = customtkinter.StringVar(value="off")
        switch88Keysvar = customtkinter.StringVar(value="off")
        switchConsolevar = customtkinter.StringVar(value="off")

        self.midi_port_lock = threading.Lock()

        switchUseMIDIvar.set("on" if config_data.get('useMIDI', False) else "off")
        switchSustainvar.set("on" if config_data.get('sustainEnabled', False) else "off")
        switchNoDoublesvar.set("on" if config_data.get('noDoubles', False) else "off")
        switchVelocityvar.set("on" if config_data.get('velocity', False) else "off")
        switch88Keysvar.set("on" if config_data.get('88Keys', False) else "off")
        switchConsolevar.set("on" if config_data.get('console', False) else "off")

        # MIDI
        self.home_frame = customtkinter.CTkFrame(self.master, corner_radius=0, fg_color="#0A0A0A")
        self.home_frame.grid_columnconfigure(0, weight=1)

        self.home_frame_label_1 = customtkinter.CTkLabel(
            self.home_frame, text="MIDI Output Device", fg_color="transparent", font=consolas_font
        )
        self.home_frame_label_1.grid(row=0, column=0, padx=(0, 200), pady=(10, 0), sticky="s")

        self.home_frame_label_1_toggle = customtkinter.CTkSwitch(
            self.home_frame, text="Use MIDI", command=switchUseMIDI, variable=switchUseMIDIvar, font=consolas_font, onvalue="on", offvalue="off"
        )
        self.home_frame_label_1_toggle.grid(row=0, column=0, padx=(0, 40), pady=(10, 0), sticky="e")

        self.output_devices = mido.get_output_names()
        loopbe_device = next((device for device in self.output_devices if "LoopBe" in device), None)

        self.home_frame_combobox_1 = customtkinter.CTkOptionMenu(
            self.home_frame, width=350, values=self.output_devices, font=consolas_font
        )
        default_device = loopbe_device if loopbe_device else self.output_devices[0]
        self.home_frame_combobox_1.set(default_device)
        self.home_frame_combobox_1.grid(row=1, column=0, padx=0, pady=0)

        self.home_frame_label_2 = customtkinter.CTkLabel(
            self.home_frame, text="MIDI File Path", fg_color="transparent", font=consolas_font
        )
        self.home_frame_label_2.grid(row=2, column=0, padx=(0,200), pady=(10, 0))

        self.home_frame_entry_1 = customtkinter.CTkEntry(self.home_frame, width=350, placeholder_text="/midi.mid")
        self.home_frame_entry_1.grid(row=3, column=0, padx=20, pady=(10, 0))

        self.select_file_button = customtkinter.CTkButton(
            self.home_frame, text="Select File", command=self.open_file_dialog, font=consolas_font
        )
        self.select_file_button.grid(row=2, column=0, padx=(0,55), pady=(10,0), sticky="e")

        self.consolekl = customtkinter.CTkFrame(master=self.home_frame, width=200, height=115)
        self.consolekl.grid(row=4, column=0, padx=(0,40), pady=(10,0), sticky="ne")
        self.consolekl.pack_propagate(0)

        self.home_frame_label_1_toggle_console = customtkinter.CTkSwitch(
            self.home_frame, text="Console", command=switchConsole, variable=switchConsolevar, font=consolas_font, onvalue="on", offvalue="off"
        )
        self.home_frame_label_1_toggle_console.grid(row=4, column=0, padx=(0, 40), pady=(0, 10), sticky="se")

        self.home_frame_label_1_toggle_sustain = customtkinter.CTkSwitch(
            self.home_frame, text="Sustain   ", command=switchSustain, variable=switchSustainvar, font=consolas_font, onvalue="on", offvalue="off"
        )
        self.home_frame_label_1_toggle_sustain.grid(row=4, column=0, padx=(40, 0), pady=(10, 0), sticky="nw")

        self.home_frame_label_1_toggle_nodoubles = customtkinter.CTkSwitch(
            self.home_frame, text="No Doubles", command=switchNoDoubles, variable=switchNoDoublesvar, font=consolas_font, onvalue="on", offvalue="off"
        )
        self.home_frame_label_1_toggle_nodoubles.grid(row=4, column=0, padx=(40, 0), pady=(40, 0), sticky="nw")

        self.home_frame_label_1_toggle_velocity = customtkinter.CTkSwitch(
            self.home_frame, text="Velocity  ", command=switchVelocity, variable=switchVelocityvar, font=consolas_font, onvalue="on", offvalue="off"
        )
        self.home_frame_label_1_toggle_velocity.grid(row=4, column=0, padx=(40, 0), pady=(70, 0), sticky="nw")

        self.home_frame_label_1_toggle_88keys = customtkinter.CTkSwitch(
            self.home_frame, text="88 Keys   ", command=switch88Keys, variable=switch88Keysvar, font=consolas_font, onvalue="on", offvalue="off"
        )
        self.home_frame_label_1_toggle_88keys.grid(row=4, column=0, padx=(40, 0), pady=(100, 10), sticky="nw")
        
        self.play_button = customtkinter.CTkButton(
            self.home_frame, text="Play",fg_color="#006900", width=80, command=self.playButtonCommand, font=consolas_font
        )
        self.play_button.grid(row=10, column=0, padx=45, pady=(0, 0), sticky="w")

        self.reset_button = customtkinter.CTkButton(
            self.home_frame, text="Stop",fg_color="#444444", width=80, state="disabled", command=self.stop_playback, font=consolas_font
        )
        self.reset_button.grid(row=10, column=0, padx=130, pady=(0, 0), sticky="w")

        self.home_frame_label_3 = customtkinter.CTkLabel(
            self.home_frame, text=" Play:", fg_color="transparent", font=consolas_font
        )
        self.home_frame_label_3.grid(row=5, column=0, padx=(0, 300), pady=(0, 60), sticky="s")

        self.play_hotkey = customtkinter.CTkButton(
            self.home_frame, text=config_data.get('playHotkey', 'F1'), width=70, command=self.getPlayHotkey, font=consolas_font
        )
        self.play_hotkey.grid(row=5, column=0, padx=(0, 165), pady=(0, 60), sticky="s")

        self.home_frame_label_4 = customtkinter.CTkLabel(
            self.home_frame, text="Pause:", fg_color="transparent", font=consolas_font
        )
        self.home_frame_label_4.grid(row=5, column=0, padx=(0, 300), pady=(0, 30), sticky="s")

        self.pause_hotkey = customtkinter.CTkButton(
            self.home_frame, text=config_data.get('pauseHotkey', 'F2'), width=70, command=self.getPauseHotkey, font=consolas_font
        )
        self.pause_hotkey.grid(row=5, column=0, padx=(0, 165), pady=(0, 30), sticky="s")

        self.home_frame_label_5 = customtkinter.CTkLabel(
            self.home_frame, text=" Stop:", fg_color="transparent", font=consolas_font
        )
        self.home_frame_label_5.grid(row=5, column=0, padx=(0, 300), pady=(0, 0), sticky="s")

        self.stop_hotkey = customtkinter.CTkButton(
            self.home_frame, text=config_data.get('stopHotkey', 'F3'), width=70, command=self.getStopHotkey, font=consolas_font
        )
        self.stop_hotkey.grid(row=5, column=0, padx=(0, 165), pady=(0, 0), sticky="s")

        self.home_frame_label_6 = customtkinter.CTkLabel(
            self.home_frame, text="Slow Down:", fg_color="transparent", font=consolas_font
        )
        self.home_frame_label_6.grid(row=5, column=0, padx=(80, 0), pady=(0, 60), sticky="s")

        self.speed_hotkey = customtkinter.CTkButton(
            self.home_frame, text=config_data.get('speedHotkey', 'F3'), width=70, command=self.getSpeedUpHotkey, font=consolas_font
        )
        self.speed_hotkey.grid(row=5, column=0, padx=(250, 0), pady=(0, 60), sticky="s")

        self.home_frame_label_7 = customtkinter.CTkLabel(
            self.home_frame, text=" Speed Up:", fg_color="transparent", font=consolas_font
        )
        self.home_frame_label_7.grid(row=5, column=0, padx=(80, 0), pady=(0, 30), sticky="s")

        self.slow_hotkey = customtkinter.CTkButton(
            self.home_frame, text=config_data.get('slowHotkey', 'F3'), width=70, command=self.getSlowDownHotkey, font=consolas_font
        )
        self.slow_hotkey.grid(row=5, column=0, padx=(250, 0), pady=(0, 30), sticky="s")

        self.timeline = customtkinter.CTkLabel(
            self.home_frame, text="0:00:00 / 0:00:00", fg_color="transparent", font=consolas_font
        )
        self.timeline.grid(row=10, column=0, padx=(0, 50), pady=(0, 0), sticky="e")

        self.speedlabel = customtkinter.CTkLabel(
            self.home_frame, text="Speed", fg_color="transparent", font=consolas_font
        )
        self.speedlabel.grid(row=9, column=0, padx=(0,290), pady=(15, 0))

        # 

        self.speed = customtkinter.CTkSlider(self.home_frame, from_=50, to=500, command=self.sliderupdate)
        self.speed.grid(row=9, column=0, padx=(0,50), pady=(15, 0))
        self.speed.set(100)

        self.resetspeed = customtkinter.CTkButton(
            self.home_frame, image=self.reset_image, text="", width=30, command=self.resetspeedvalue, font=consolas_font
        )
        self.resetspeed.grid(row=9, column=0, padx=(290, 0), pady=(15, 0))

        self.speedtext = customtkinter.CTkEntry(
            self.home_frame, placeholder_text="100", width=50, fg_color="transparent", font=consolas_font
        )
        self.speedtext.grid(row=9, column=0, padx=(200,0), pady=(15, 0))
        self.speedtext.insert(0, "100")

        self.speedtext.bind("<FocusOut>", self.slidertoentry)
        self.speedtext.bind("<KeyRelease>", self.slidertoentry)
        self.speed.bind("<ButtonRelease-1>", self.entrytoslider)

        self.stop_playback_flag = threading.Event()

        # MIDI HUB

        self.midi_hub_frame = customtkinter.CTkScrollableFrame(self.master, corner_radius=0, fg_color="#0A0A0A")
        self.midi_hub_frame.grid_columnconfigure(0, weight=1)
        
        please_wait = customtkinter.CTkLabel(
            self.midi_hub_frame, text="Please Wait...",
            compound="left", font=customtkinter.CTkFont(size=40, weight="bold", family="Consolas")
        )
        please_wait.grid(row=1, column=0, padx=10, pady=(150,0), sticky="nsew")

        self.downloadimagefile = customtkinter.CTkImage(downloadimage, size=(18, 18))
        self.searchimagefile = customtkinter.CTkImage(searchimage, size=(18, 18))

        self.midi_data_url = "https://raw.githubusercontent.com/NotHammer043/midi-db/main/midiData.json"
        self.image_base_url = "https://raw.githubusercontent.com/NotHammer043/midi-db/main/images/"

        self.page_size = 10
        self.current_page = 1

        self.midi_hub_searchbar = customtkinter.CTkEntry(self.midi_hub_frame, placeholder_text="Search", width=330)
        self.midi_hub_searchbar.grid(row=0, column=0, padx=20, pady=(10, 0), sticky="w")
        self.midi_hub_searchbar.bind("<Return>", self.filter_midi_data)

        self.search_button = customtkinter.CTkButton(master=self.midi_hub_frame, text="", fg_color="#006900", width=24, height=24, command=self.searchButton, image=self.searchimagefile)
        self.search_button.grid(row=0, column=0, padx=20, pady=(10, 0), sticky="e")

        self.download_folder = "./Midis"
        if not os.path.exists(self.download_folder):
            os.makedirs(self.download_folder)

        # END
        if config_data['console']:
            self.consolekl_text_insert_ignorefalse("If playback is laggy",)
            self.consolekl_text_insert_ignorefalse("Consider disabling this :)")
        else:
            self.consolekl_text_insert_ignorefalse("Disabled")
        self.select_frame_by_name("home")
        self.useMIDIStatus()
        self.hasMIDI()

    def searchButton(self, event=None):
        self.filter_midi_data(event)

    def load_midi_data(self):
        response = requests.get(self.midi_data_url)
        self.all_midi_data = response.json()
        self.filtered_midi_data = self.all_midi_data
        self.total_pages = (len(self.filtered_midi_data) + self.page_size - 1) // self.page_size

        self.show_page(self.current_page)

    def show_page(self, page):
        for widget in self.midi_hub_frame.winfo_children():
            if widget != self.midi_hub_searchbar and (not hasattr(self, 'search_button') or widget != self.search_button):
                widget.destroy()

        start_index = (page - 1) * self.page_size
        end_index = min(start_index + self.page_size, len(self.filtered_midi_data))

        for index, midi in enumerate(self.filtered_midi_data[start_index:end_index], start=1):
            self.create_midi_frame(index, midi)
            
        self.midi_hub_footer()

    def create_midi_frame(self, row, midi):
        midi_frame = customtkinter.CTkFrame(master=self.midi_hub_frame, height=100)
        midi_frame.grid(row=row, column=0, padx=20, pady=5, sticky="nsew")

        image_url = self.image_base_url + midi["imageFilename"]
        image_file = customtkinter.CTkImage(Image.open(requests.get(image_url, stream=True).raw), size=(100, 100))

        midi_image = customtkinter.CTkButton(master=midi_frame, text="", fg_color="transparent", width=100, height=100, state="disabled", image=image_file)
        midi_image.grid(row=0, column=0, sticky="w")

        midi_name = customtkinter.CTkLabel(
            midi_frame, text=midi["name"],
            compound="left", font=customtkinter.CTkFont(size=14, weight="bold", family="Consolas")
        )
        midi_name.grid(row=0, column=0, padx=120, pady=(0,80), sticky="w")

        midi_artist = customtkinter.CTkLabel(
            midi_frame, text=midi["artists"],
            compound="left", font=customtkinter.CTkFont(size=14, weight="bold", family="Consolas")
        )
        midi_artist.grid(row=0, column=0, padx=120, pady=(0,35), sticky="w")

        midi_arr = customtkinter.CTkLabel(
            midi_frame, text="Arr: " + (midi["arrangement"] if midi["arrangement"] else "N/A"),
            compound="left", font=customtkinter.CTkFont(size=13, weight="bold", family="Consolas")
        )
        midi_arr.grid(row=0, column=0, padx=120, pady=(40,0), sticky="w")

        midi_uploadedby = customtkinter.CTkLabel(
            midi_frame, text="Uploader: " + midi["githubUser"],
            compound="left", font=customtkinter.CTkFont(size=13, weight="bold", family="Consolas")
        )
        midi_uploadedby.grid(row=0, column=0, padx=120, pady=(80,0), sticky="w")

        midi_download = customtkinter.CTkButton(master=midi_frame, text="", fg_color="#006900", width=24, height=24, image=self.downloadimagefile)
        midi_download.grid(row=0, column=0, padx=330, pady=(75,0), sticky="e")

        midi_filename = midi["midiFilename"]
        if midi_filename:
            download_url = "https://raw.githubusercontent.com/NotHammer043/midi-db/main/midis/" + midi_filename
            midi_download = customtkinter.CTkButton(master=midi_frame, text="", fg_color="#006900", width=24, height=24, image=self.downloadimagefile, command=lambda url=download_url: self.download_midi(url))
            midi_download.grid(row=0, column=0, padx=330, pady=(75,0), sticky="e")

    def download_midi(self, url):
        response = requests.get(url)
        filename = url.split("/")[-1]
        filepath = os.path.join(self.download_folder, filename)
        config_data['midiFile'] = filepath
        self.home_frame_entry_1.delete(0, "end")
        self.home_frame_entry_1.insert(0, filepath)
        with open(config_path, 'w') as config_file:
            json.dump(config_data, config_file, indent=2)
        with open(filepath, "wb") as f:
            f.write(response.content)
        self.select_frame_by_name("home")
        self.timeline.configure(text=f"0:00:00 / {str(datetime.timedelta(seconds=int(self.total_time)))}")
        threading.Thread(target=app.consolekl_text_insert, args=(f"Downloaded!",)).start()
        threading.Thread(target=app.consolekl_text_insert, args=(filename,)).start()
        midi_file = MidiFile(filepath)
        self.total_time = midi_file.length
        self.timeline.configure(text=f"0:00:00 / {str(datetime.timedelta(seconds=int(self.total_time)))}")

        keyboard.unhook_all()
        keyboard.on_press_key(config_data['playHotkey'], app.toggle_playback)
        keyboard.on_press_key(config_data['pauseHotkey'], app.pause_playback)
        keyboard.on_press_key(config_data['stopHotkey'], app.stop_playback)
        keyboard.on_press_key(config_data['speedHotkey'], app.speedup_playback)
        keyboard.on_press_key(config_data['slowHotkey'], app.slowdown_playback)

    def midi_hub_footer(self):
        pagination_frame = customtkinter.CTkFrame(master=self.midi_hub_frame)
        pagination_frame.grid(row=self.page_size + 1, column=0, padx=20, pady=5, sticky="nsew")

        prev_button = customtkinter.CTkButton(master=pagination_frame, text="Previous", width=118, command=self.prev_page)
        prev_button.grid(row=0, column=0, padx=10, pady=10)

        page_label = customtkinter.CTkLabel(master=pagination_frame, text=f"Page {self.current_page}/{self.total_pages}")
        page_label.grid(row=0, column=1, padx=10, pady=10)

        next_button = customtkinter.CTkButton(master=pagination_frame, text="Next", width=118, command=self.next_page)
        next_button.grid(row=0, column=2, padx=10, pady=10)

    def prev_page(self):
        if self.current_page > 1:
            self.current_page -= 1
            threading.Thread(target=self.show_page, args=(self.current_page,)).start()

    def next_page(self):
        if self.current_page < self.total_pages:
            self.current_page += 1
            threading.Thread(target=self.show_page, args=(self.current_page,)).start()

    def filter_midi_data(self, event):
        search_query = self.midi_hub_searchbar.get().lower()
        self.filtered_midi_data = [midi for midi in self.all_midi_data if search_query in midi["name"].lower()]
        self.total_pages = (len(self.filtered_midi_data) + self.page_size - 1) // self.page_size
        self.current_page = 1
        self.show_page(self.current_page)

    def hasMIDI(self):
        if not config_data.get('midiFile') == "":
            self.home_frame_entry_1.insert(0, config_data.get('midiFile'))

            midifile = MidiFile(config_data.get('midiFile'))
            self.total_time = midifile.length
            self.timeline.configure(text=f"0:00:00 / {str(datetime.timedelta(seconds=int(self.total_time)))}")

            keyboard.on_press_key(config_data['playHotkey'], self.toggle_playback)
            keyboard.on_press_key(config_data['pauseHotkey'], self.pause_playback)
            keyboard.on_press_key(config_data['stopHotkey'], self.stop_playback)
            keyboard.on_press_key(config_data['speedHotkey'], self.speedup_playback)
            keyboard.on_press_key(config_data['slowHotkey'], self.slowdown_playback)
    
    def useMIDIStatus(self, event=None):
        if not config_data.get('useMIDI', False):
            self.home_frame_combobox_1.configure(state="disabled")
            self.home_frame_label_1_toggle_sustain.configure(state="normal")
            self.home_frame_label_1_toggle_nodoubles.configure(state="normal")
            self.home_frame_label_1_toggle_velocity.configure(state="normal")
            self.home_frame_label_1_toggle_88keys.configure(state="normal")
            self.pause_hotkey.configure(state="normal")
            self.stop_hotkey.configure(state="normal")
            self.speed_hotkey.configure(state="normal")
            self.slow_hotkey.configure(state="normal")
        else:
            self.home_frame_combobox_1.configure(state="normal")
            self.home_frame_label_1_toggle_sustain.configure(state="disabled")
            self.home_frame_label_1_toggle_nodoubles.configure(state="disabled")
            self.home_frame_label_1_toggle_velocity.configure(state="disabled")
            self.home_frame_label_1_toggle_88keys.configure(state="disabled")
            self.pause_hotkey.configure(state="disabled")
            self.stop_hotkey.configure(state="disabled")
            self.speed_hotkey.configure(state="disabled")
            self.slow_hotkey.configure(state="disabled")

    def playButtonCommand(self, event=None):
        if self.isRunning:
            self.pause_playback(self)
        else:
            self.toggle_playback()

    def sliderupdate(self, value):
        rounded_value = round(float(value))
        self.speedtext.delete(0, "end")
        self.speedtext.insert(0, str(rounded_value))
        self.playback_speed = min(500, rounded_value)

    def slidertoentry(self, event=None):
        try:
            value = float(self.speedtext.get())
            if 10 <= value <= 500:
                self.speed.set(value)
        except ValueError:
            pass

    def entrytoslider(self, event):
        value = self.speed.get()
        self.speedtext.delete(0, "end")
        self.speedtext.insert(0, str(value))

    def resetspeedvalue(self):
        self.playback_speed = min(500, 100)
        self.speedtext.delete(0, "end")
        self.speedtext.insert(0, 100)
        self.speed.set(100)

    def getPlayHotkey(self):
        keyboard.unhook_all()
        self.play_hotkey.configure(text="Press Key")
        self.bind("<Key>", self.getPlayPressedkey)

    def getPlayPressedkey(self, event):
        new_hotkey = event.keysym
        self.play_hotkey.configure(text=new_hotkey)

        self.playHotkey = new_hotkey
        config_data['playHotkey'] = new_hotkey
        with open(config_path, 'w') as config_file:
            json.dump(config_data, config_file, indent=2)

        keyboard.unhook_all()
        keyboard.on_press_key(config_data['playHotkey'], self.toggle_playback)
        keyboard.on_press_key(config_data['pauseHotkey'], self.pause_playback)
        keyboard.on_press_key(config_data['stopHotkey'], self.stop_playback)
        keyboard.on_press_key(config_data['speedHotkey'], self.speedup_playback)
        keyboard.on_press_key(config_data['slowHotkey'], self.slowdown_playback)

        self.unbind("<Key>")

    def getPauseHotkey(self):
        keyboard.unhook_all()
        self.pause_hotkey.configure(text="Press Key")
        self.bind("<Key>", self.getPausePressedkey)

    def getPausePressedkey(self, event):
        new_hotkey = event.keysym
        self.pause_hotkey.configure(text=new_hotkey)

        self.hotkey = new_hotkey
        config_data['pauseHotkey'] = new_hotkey
        with open(config_path, 'w') as config_file:
            json.dump(config_data, config_file, indent=2)

        keyboard.unhook_all()
        keyboard.on_press_key(config_data['playHotkey'], self.toggle_playback)
        keyboard.on_press_key(config_data['pauseHotkey'], self.pause_playback)
        keyboard.on_press_key(config_data['stopHotkey'], self.stop_playback)
        keyboard.on_press_key(config_data['speedHotkey'], self.speedup_playback)
        keyboard.on_press_key(config_data['slowHotkey'], self.slowdown_playback)

        self.unbind("<Key>")

    def getStopHotkey(self):
        keyboard.unhook_all()
        self.stop_hotkey.configure(text="Press Key")
        self.bind("<Key>", self.getStopPressedkey)

    def getStopPressedkey(self, event):
        new_hotkey = event.keysym
        self.stop_hotkey.configure(text=new_hotkey)

        self.hotkey = new_hotkey
        config_data['stopHotkey'] = new_hotkey
        with open(config_path, 'w') as config_file:
            json.dump(config_data, config_file, indent=2)

        keyboard.unhook_all()
        keyboard.on_press_key(config_data['playHotkey'], self.toggle_playback)
        keyboard.on_press_key(config_data['pauseHotkey'], self.pause_playback)
        keyboard.on_press_key(config_data['stopHotkey'], self.stop_playback)
        keyboard.on_press_key(config_data['speedHotkey'], self.speedup_playback)
        keyboard.on_press_key(config_data['slowHotkey'], self.slowdown_playback)

        self.unbind("<Key>")

    def getSpeedUpHotkey(self):
        keyboard.unhook_all()
        self.speed_hotkey.configure(text="Press Key")
        self.bind("<Key>", self.getSpeedUpPressedkey)

    def getSpeedUpPressedkey(self, event):
        new_hotkey = event.keysym
        self.speed_hotkey.configure(text=new_hotkey)

        self.hotkey = new_hotkey
        config_data['speedHotkey'] = new_hotkey
        with open(config_path, 'w') as config_file:
            json.dump(config_data, config_file, indent=2)

        keyboard.unhook_all()
        keyboard.on_press_key(config_data['playHotkey'], self.toggle_playback)
        keyboard.on_press_key(config_data['pauseHotkey'], self.pause_playback)
        keyboard.on_press_key(config_data['stopHotkey'], self.stop_playback)
        keyboard.on_press_key(config_data['speedHotkey'], self.speedup_playback)
        keyboard.on_press_key(config_data['slowHotkey'], self.slowdown_playback)

        self.unbind("<Key>")

    def getSlowDownHotkey(self):
        keyboard.unhook_all()
        self.slow_hotkey.configure(text="Press Key")
        self.bind("<Key>", self.getSlowDownPressedkey)

    def getSlowDownPressedkey(self, event):
        new_hotkey = event.keysym
        self.slow_hotkey.configure(text=new_hotkey)

        self.hotkey = new_hotkey
        config_data['slowHotkey'] = new_hotkey
        with open(config_path, 'w') as config_file:
            json.dump(config_data, config_file, indent=2)

        keyboard.unhook_all()
        keyboard.on_press_key(config_data['playHotkey'], self.toggle_playback)
        keyboard.on_press_key(config_data['pauseHotkey'], self.pause_playback)
        keyboard.on_press_key(config_data['stopHotkey'], self.stop_playback)
        keyboard.on_press_key(config_data['speedHotkey'], self.speedup_playback)
        keyboard.on_press_key(config_data['slowHotkey'], self.slowdown_playback)

        self.unbind("<Key>")

    def toggle_playback(self, e=None):
        useMIDI = config_data.get('useMIDI', False)
        if not useMIDI and not self.isRunning:  # Translate
            print("Using Mid2VK")
            self.selected_device = self.home_frame_combobox_1.get()
            self.midi_file_path = self.home_frame_entry_1.get()
            self.CloseThread = False
            self.play_button.configure(text="Playing", fg_color="#db7b2b")
            self.reset_button.configure(state="normal", fg_color="#cc3232")
            self.isRunning = True
            floor = math.floor
            press = keyboard.press
            release = keyboard.release
            velocityMap = "1234567890qwertyuiopasdfghjklzxc"
            letterNoteMap = "1!2@34$5%6^78*9(0qQwWeErtTyYuiIoOpPasSdDfgGhHjJklLzZxcCvVbBnm"
            LowNotes = "1234567890qwert"
            HighNotes = "yuiopasdfghj"
            SettingsFileName = "config.json"
            velocityList = [
                0, 4, 8, 12, 16, 20, 24, 28,
                32, 36, 40, 44, 48, 52, 56, 60,
                64, 68, 72, 76, 80, 84, 88, 92,
                96, 100, 104, 108, 112, 116, 120, 124
            ]
            SavableSettings = {
                'sustainEnabled': config_data.get('sustainEnabled', False),
                'noDoubles': config_data.get('noDoubles', False),
                'velocity': config_data.get('velocity', False),
                '88Keys': config_data.get('88Keys', False),
                'sustainCutoff': config_data.get('sustainCutoff', 63)
            }

            def find_velocity_key(velocity):
                minimum = 0
                maximum = len(velocityList) - 1
                while minimum <= maximum:
                    index = (minimum + maximum) // 2
                    if velocityList[index] == velocity:
                        return velocityMap[index]
                    elif velocityList[index] < velocity:
                        minimum = index + 1
                    else:
                        maximum = index - 1
                return velocityMap[maximum]

            def simulate_key(type, note, velocity):
                global SavableSettings
                if not -15 <= note - 36 <= 88:
                    return
                index = note - 36
                key = 0
                try:
                    key = letterNoteMap[index]
                except:
                    pass

                log_message = None

                if type == "note_on":
                    if SavableSettings["velocity"]:
                        velocitykey = find_velocity_key(velocity)
                        press("alt")
                        press(velocitykey)
                        release(velocitykey)
                        release("alt")
                        log_message = f"velocity: alt + {velocitykey}"

                    if 0 <= note - 36 <= 60:
                        if SavableSettings["noDoubles"]:
                            if re.search("[!@$%^*(]", key):
                                release(letterNoteMap[index - 1])
                            else:
                                release(key.lower())
                        if re.search("[!@$%^*(]", key):
                            press("shift")
                            press(letterNoteMap[index - 1])
                            release("shift")
                            log_message = f"press: shift + {letterNoteMap[index - 1]}"
                        elif key.isupper():
                            press("shift")
                            press(key.lower())
                            release("shift")
                            log_message = f"press: shift + {key.lower()}"
                        else:
                            press(key)
                            log_message = f"press: {key}"
                    elif SavableSettings["88Keys"]:
                        K = None
                        if 20 <= note < 40:
                            K = LowNotes[note - 21]
                        else:
                            K = HighNotes[note - 109]
                        if K:
                            release(K.lower())
                            press("ctrl")
                            press(K.lower())
                            release("ctrl")
                            log_message = f"press: ctrl + {K.lower()}"
                elif 0 <= note - 36 <= 60:
                    if re.search("[!@$%^*(]", key):
                        release(letterNoteMap[index - 1])
                        log_message = f"release: {letterNoteMap[index - 1]}"
                    else:
                        release(key.lower())
                        log_message = f"release: {key.lower()}"
                else:
                    if 20 <= note < 40:
                        K = LowNotes[note - 21]
                    else:
                        K = HighNotes[note - 109]
                    release(K.lower())
                    log_message = f"release: {K.lower()}"

                if log_message is not None:
                    print(log_message)

                
                if config_data.get('console', False):
                    threading.Thread(target=app.consolekl_text_insert, args=(f"{log_message}",)).start()

            def parse_midi(message):
                
                if message.type == "control_change" and SavableSettings["sustainEnabled"]:
                    if not self.sustainToggle or message.value > SavableSettings["sustainCutoff"]:
                        self.sustainToggle = True
                        press("space")
                        print("press: space (sustain on)")
                    elif self.sustainToggle and message.value < SavableSettings["sustainCutoff"]:
                        self.sustainToggle = False
                        release("space")
                        print("release: space (sustain off)")
                else:
                    if message.type == "note_on" or message.type == "note_off":
                        if message.velocity == 0:
                            try:
                                simulate_key("note_off", message.note, message.velocity)
                            except IndexError:
                                pass
                        else:
                            try:
                                simulate_key(message.type, message.note, message.velocity)
                            except IndexError:
                                pass

            def load_files():
                global SavableSettings
                try:
                    with open(SettingsFileName, "r") as f:
                        SavableSettings = json.load(f)
                except FileNotFoundError:
                    save_settings()

            def save_settings():
                with open(SettingsFileName, "w") as f:
                    json.dump(SavableSettings, f, indent=2)

            def midi_playback():
                print("nanoMIDI Mid2VK Translator v1.0")
                try:
                    mid = mido.MidiFile(self.midi_file_path)
                    start_time = time.time()
                    current_position = 0
                    total_duration = mid.length

                    for msg in mid:
                        self.pause_event.wait()
                        elapsed_time = time.time() - start_time
                        time.sleep(msg.time * (100 / self.playback_speed))
                        parse_midi(msg)
                        
                        if self.CloseThread:
                            break
                        
                        self.CloseThread = False
                        current_time = time.time()
                        elapsed_time = current_time - start_time
                        sleep_time = max(0, msg.time * (100 / self.playback_speed) - elapsed_time)
                        time.sleep(sleep_time)
                        start_time = current_time
                        
                        current_position += msg.time * (100 / self.playback_speed)
                        current_time_str = time.strftime("%H:%M:%S", time.gmtime(current_position)).split(':')
                        current_position_formatted = f"{int(current_time_str[0]) if current_time_str[0] != '00' else '0'}:{int(current_time_str[1]):02d}:{int(current_time_str[2]):02d}"
                        total_duration_str = time.strftime("%H:%M:%S", time.gmtime(total_duration)).split(':')
                        total_duration_formatted = f"{int(total_duration_str[0]) if total_duration_str[0] != '00' else '0'}:{int(total_duration_str[1]):02d}:{int(total_duration_str[2]):02d}"

                        def updatetimeline():
                            if not self.hasUpdated:
                                self.hasUpdated = True
                                self.timeline.configure(text=f"{current_position_formatted} / {total_duration_formatted}")
                                time.sleep(1)
                                self.hasUpdated = False

                        threading.Thread(target=updatetimeline).start()
                    
                    print("Done")
                    midi_file = MidiFile(self.midi_file_path)
                    self.total_time = midi_file.length
                    self.timeline.configure(text=f"0:00:00 / {str(datetime.timedelta(seconds=int(self.total_time)))}")
                    self.isRunning = False
                    self.play_button.configure(text="Play", fg_color="#006900")
                    self.reset_button.configure(state="disabled", fg_color="#444444")
                    threading.Thread(target=app.consolekl_text_insert, args=(f"----- Done -----",)).start()

                except Exception as e:
                    print("Error: ", e)

            if __name__ == "__main__":
                load_files()
                Thread(target=midi_playback, daemon=True).start()

        elif useMIDI: # Use MIDI
            if self.playback_state:
                self.stop_playback_flag.set()
                self.playback_state = False
                self.play_button.configure(text="Play", fg_color="#006900")
            else:
                self.stop_playback_flag.clear()
                playback_thread = threading.Thread(target=self.play_midi, daemon=True)
                playback_thread.start()
                self.playback_state = True
                self.play_button.configure(text="Stop", fg_color="#FF1800")
                self.update_timeline()

    def pause_playback(self, event=None):
        if self.isRunning:
            if self.pause_event.is_set():
                self.pause_event.clear()
                print("Paused")
                self.play_button.configure(text="Paused", fg_color="#e7b416")
                threading.Thread(target=app.consolekl_text_insert, args=(f"----- Paused -----",)).start()
            else:
                self.pause_event.set()
                print("Resumed")
                self.play_button.configure(text="Playing", fg_color="#db7b2b")
                threading.Thread(target=app.consolekl_text_insert, args=(f"----- Resumed -----",)).start()

    def stop_playback(self, event=None):
        if self.isRunning:
            self.pause_event.set()
            self.CloseThread = True

    def speedup_playback(self, event=None):
        self.playback_speed = max(10, self.playback_speed - 10)
        self.speed.set(self.playback_speed)

        rounded_value = round(float(self.playback_speed))
        self.speedtext.delete(0, "end")
        self.speedtext.insert(0, str(rounded_value))

        print(f"speed: {self.playback_speed}")
        
    def slowdown_playback(self, event=None):
        self.playback_speed = min(500, self.playback_speed + 10)
        self.speed.set(self.playback_speed)

        rounded_value = round(float(self.playback_speed))
        self.speedtext.delete(0, "end")
        self.speedtext.insert(0, str(rounded_value))
        
        print(f"speed: {self.playback_speed}")

    def play_midi_threaded(self):
        with self.midi_port_lock:
            playback_thread = threading.Thread(target=self.play_midi, daemon=True)
            playback_thread.start()

    def play_midi(self):
        self.selected_device = self.home_frame_combobox_1.get()
        self.midi_file_path = self.home_frame_entry_1.get()

        if self.selected_device and self.midi_file_path:
            try:
                with self.midi_port_lock:
                    self.midi_file = MidiFile(self.midi_file_path)
                    midi_port = mido.open_output(self.selected_device)

                    ticks_per_beat = self.midi_file.ticks_per_beat
                    speed_factor = self.speed.get() / 100.0

                    self.playback_start_time = time.time()

                    for track in self.midi_file.tracks:
                        for msg in track:
                            if hasattr(msg, 'time'):
                                msg.time = int(msg.time / speed_factor)

                    for msg in self.midi_file.play():
                        if self.stop_playback_flag.is_set():
                            break

                        midi_port.send(msg)

                    midi_port.close()

            except Exception as e:
                print(f"{e}")

            self.playback_state = False
            self.play_button.configure(text="Play", fg_color="#006900")
            self.playback_start_time = None
            total_time = self.midi_file.length
            self.timeline.configure(text=f"0:00:00 / {str(datetime.timedelta(seconds=int(total_time)))}")


            
    def consolekl_text_insert(self, text):
        if config_data.get('console', False):
            label = tk.Label(self.consolekl, text=text, fg="white", bg="#080404", height=1)
            label.pack(anchor="sw")
            self.log_labels.append(label)

            if len(self.log_labels) > self.max_log_messages:
                oldest_label = self.log_labels.pop(0)
                oldest_label.destroy()

            if len(self.consolekl.winfo_children()) > 20:
                for widget in self.consolekl.winfo_children():
                    widget.destroy()

            self.consolekl.update_idletasks()

    def consolekl_text_insert_ignorefalse(self, text):
        label = tk.Label(self.consolekl, text=text, fg="white", bg="#080404", height=1)
        label.pack(anchor="sw")
        self.log_labels.append(label)

        if len(self.log_labels) > self.max_log_messages:
            oldest_label = self.log_labels.pop(0)
            oldest_label.destroy()

        if len(self.consolekl.winfo_children()) > 20:
            for widget in self.consolekl.winfo_children():
                widget.destroy()

        self.consolekl.update_idletasks()

    def update_timeline(self):
        if self.playback_start_time is not None and self.playback_state:
            elapsed_time = time.time() - self.playback_start_time
            total_time = self.midi_file.length
            elapsed_time_str = str(datetime.timedelta(seconds=int(elapsed_time)))
            total_time_str = str(datetime.timedelta(seconds=int(total_time)))
            timeline_text = f"{elapsed_time_str} / {total_time_str}"
            self.timeline.configure(text=timeline_text)
            self.after(1000, self.update_timeline)

    def open_file_dialog(self):
        self.home_frame_entry_1.delete(0, "end")
        self.stop_playback_flag.set()
        self.playback_state = False
        self.play_button.configure(text="Play")
        self.CloseThread = True

        keyboard.unhook_all()

        file_path = filedialog.askopenfilename(filetypes=[("MIDI files", "*.mid;*.midi")])
        if file_path:
            self.home_frame_entry_1.delete(0, "end")
            self.home_frame_entry_1.insert(0, file_path)

            midi_file = MidiFile(file_path)
            self.total_time = midi_file.length
            self.timeline.configure(text=f"0:00:00 / {str(datetime.timedelta(seconds=int(self.total_time)))}")

            config_data['midiFile'] = file_path
            with open(config_path, 'w') as config_file:
                json.dump(config_data, config_file, indent=2)

            keyboard.on_press_key(config_data['playHotkey'], app.toggle_playback)
            keyboard.on_press_key(config_data['pauseHotkey'], app.pause_playback)
            keyboard.on_press_key(config_data['stopHotkey'], app.stop_playback)
            keyboard.on_press_key(config_data['speedHotkey'], app.speedup_playback)
            keyboard.on_press_key(config_data['slowHotkey'], app.slowdown_playback)

    def select_frame_by_name(self, name):
        self.home_button.configure(fg_color=("gray5", "gray5") if name == "home" else "transparent")

        if name == "home":
            self.home_frame.grid(row=0, column=1, sticky="nsew")
        else:
            self.home_frame.grid_forget()

        self.midi_hub.configure(fg_color=("gray5", "gray5") if name == "midi_hub" else "transparent")

        if name == "midi_hub":
            self.midi_hub_frame.grid(row=0, column=1, sticky="nsew")
        else:
            self.midi_hub_frame.grid_forget()

    def home_button_event(self):
        self.select_frame_by_name("home")

    def midi_hub_event(self):
        self.select_frame_by_name("midi_hub")
        threading.Thread(target=self.load_midi_data).start()

    def create_debug_console(self):
        ctypes.windll.kernel32.AllocConsole()
        sys.stdout = open('CONOUT$', 'w')
        sys.stderr = open('CONOUT$', 'w')
        sys.stdin = open('CONIN$', 'r')

if __name__ == "__main__":
    app = App()
    app.mainloop()